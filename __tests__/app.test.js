const { api, fetchCurrentWeather, fetchLocation, fetchWeeklyWeather } = require("../src/api");
import axios from "axios";

afterEach(() => {
    jest.resetAllMocks();
});


const getCurrentDate = () => {
  const today = new Date();
  const year = today.getFullYear();
  const month = String(today.getMonth() + 1).padStart(2, '0');
  const day = String(today.getDate()).padStart(2, '0');
  return `${year}-${month}-${day}`;
  };
const getNextDate = () => {
  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  const year = tomorrow.getFullYear();
  const month = String(tomorrow.getMonth() + 1).padStart(2, '0');
  const day = String(tomorrow.getDate()).padStart(2, '0');
  return `${year}-${month}-${day}`;
};

  const currentDate = getCurrentDate();
  const nextDate = getNextDate();

describe("fetchCurrentWeather", () => {
    test("Returns the correct weather information", () => {
        const mockResponse = {
            "latitude": 51.5,
            "longitude": -0.120000124,
            "generationtime_ms": 1.2871026992797852,
            "utc_offset_seconds": 3600,
            "timezone": "Europe/London",
            "timezone_abbreviation": "GMT+1",
            "elevation": 23,
            "current_units": {
            "time": "iso8601",
            "interval": "seconds",
            "temperature_2m": "째C",
            "relative_humidity_2m": "%",
            "precipitation": "mm",
            "weather_code": "wmo code",
            "wind_speed_10m": "km/h",
            "wind_direction_10m": "째",
            "wind_gusts_10m": "km/h",
            "apparent_temperature": "째C"
            },
            "current": {
            "time": "2025-07-01T15:45",
            "interval": 900,
            "temperature_2m": 32.6,
            "relative_humidity_2m": 37,
            "precipitation": 0,
            "weather_code": 3,
            "wind_speed_10m": 11.7,
            "wind_direction_10m": 261,
            "wind_gusts_10m": 27.4,
            "apparent_temperature": 33.3
            },
            "hourly_units": {
            "time": "iso8601",
            "temperature_2m": "째C",
            "weather_code": "wmo code",
            "uv_index": ""
            },
            "hourly": {
            "time": [
            "2025-06-24T00:00",
            "2025-06-24T01:00",
            "2025-06-24T02:00",
            "2025-06-24T03:00",
            "2025-06-24T04:00",
            "2025-06-24T05:00",
            "2025-06-24T06:00",
            "2025-06-24T07:00",
            "2025-06-24T08:00",
            "2025-06-24T09:00",
            "2025-06-24T10:00",
            "2025-06-24T11:00",
            "2025-06-24T12:00",
            "2025-06-24T13:00",
            "2025-06-24T14:00",
            "2025-06-24T15:00",
            "2025-06-24T16:00",
            "2025-06-24T17:00",
            "2025-06-24T18:00",
            "2025-06-24T19:00",
            "2025-06-24T20:00",
            "2025-06-24T21:00",
            "2025-06-24T22:00",
            "2025-06-24T23:00",
            "2025-06-25T00:00",
            "2025-06-25T01:00",
            "2025-06-25T02:00",
            "2025-06-25T03:00",
            "2025-06-25T04:00",
            "2025-06-25T05:00",
            "2025-06-25T06:00",
            "2025-06-25T07:00",
            "2025-06-25T08:00",
            "2025-06-25T09:00",
            "2025-06-25T10:00",
            "2025-06-25T11:00",
            "2025-06-25T12:00",
            "2025-06-25T13:00",
            "2025-06-25T14:00",
            "2025-06-25T15:00",
            "2025-06-25T16:00",
            "2025-06-25T17:00",
            "2025-06-25T18:00",
            "2025-06-25T19:00",
            "2025-06-25T20:00",
            "2025-06-25T21:00",
            "2025-06-25T22:00",
            "2025-06-25T23:00",
            "2025-06-26T00:00",
            "2025-06-26T01:00",
            "2025-06-26T02:00",
            "2025-06-26T03:00",
            "2025-06-26T04:00",
            "2025-06-26T05:00",
            "2025-06-26T06:00",
            "2025-06-26T07:00",
            "2025-06-26T08:00",
            "2025-06-26T09:00",
            "2025-06-26T10:00",
            "2025-06-26T11:00",
            "2025-06-26T12:00",
            "2025-06-26T13:00",
            "2025-06-26T14:00",
            "2025-06-26T15:00",
            "2025-06-26T16:00",
            "2025-06-26T17:00",
            "2025-06-26T18:00",
            "2025-06-26T19:00",
            "2025-06-26T20:00",
            "2025-06-26T21:00",
            "2025-06-26T22:00",
            "2025-06-26T23:00",
            "2025-06-27T00:00",
            "2025-06-27T01:00",
            "2025-06-27T02:00",
            "2025-06-27T03:00",
            "2025-06-27T04:00",
            "2025-06-27T05:00",
            "2025-06-27T06:00",
            "2025-06-27T07:00",
            "2025-06-27T08:00",
            "2025-06-27T09:00",
            "2025-06-27T10:00",
            "2025-06-27T11:00",
            "2025-06-27T12:00",
            "2025-06-27T13:00",
            "2025-06-27T14:00",
            "2025-06-27T15:00",
            "2025-06-27T16:00",
            "2025-06-27T17:00",
            "2025-06-27T18:00",
            "2025-06-27T19:00",
            "2025-06-27T20:00",
            "2025-06-27T21:00",
            "2025-06-27T22:00",
            "2025-06-27T23:00",
            "2025-06-28T00:00",
            "2025-06-28T01:00",
            "2025-06-28T02:00",
            "2025-06-28T03:00",
            "2025-06-28T04:00",
            "2025-06-28T05:00",
            "2025-06-28T06:00",
            "2025-06-28T07:00",
            "2025-06-28T08:00",
            "2025-06-28T09:00",
            "2025-06-28T10:00",
            "2025-06-28T11:00",
            "2025-06-28T12:00",
            "2025-06-28T13:00",
            "2025-06-28T14:00",
            "2025-06-28T15:00",
            "2025-06-28T16:00",
            "2025-06-28T17:00",
            "2025-06-28T18:00",
            "2025-06-28T19:00",
            "2025-06-28T20:00",
            "2025-06-28T21:00",
            "2025-06-28T22:00",
            "2025-06-28T23:00",
            "2025-06-29T00:00",
            "2025-06-29T01:00",
            "2025-06-29T02:00",
            "2025-06-29T03:00",
            "2025-06-29T04:00",
            "2025-06-29T05:00",
            "2025-06-29T06:00",
            "2025-06-29T07:00",
            "2025-06-29T08:00",
            "2025-06-29T09:00",
            "2025-06-29T10:00",
            "2025-06-29T11:00",
            "2025-06-29T12:00",
            "2025-06-29T13:00",
            "2025-06-29T14:00",
            "2025-06-29T15:00",
            "2025-06-29T16:00",
            "2025-06-29T17:00",
            "2025-06-29T18:00",
            "2025-06-29T19:00",
            "2025-06-29T20:00",
            "2025-06-29T21:00",
            "2025-06-29T22:00",
            "2025-06-29T23:00",
            "2025-06-30T00:00",
            "2025-06-30T01:00",
            "2025-06-30T02:00",
            "2025-06-30T03:00",
            "2025-06-30T04:00",
            "2025-06-30T05:00",
            "2025-06-30T06:00",
            "2025-06-30T07:00",
            "2025-06-30T08:00",
            "2025-06-30T09:00",
            "2025-06-30T10:00",
            "2025-06-30T11:00",
            "2025-06-30T12:00",
            "2025-06-30T13:00",
            "2025-06-30T14:00",
            "2025-06-30T15:00",
            "2025-06-30T16:00",
            "2025-06-30T17:00",
            "2025-06-30T18:00",
            "2025-06-30T19:00",
            "2025-06-30T20:00",
            "2025-06-30T21:00",
            "2025-06-30T22:00",
            "2025-06-30T23:00",
            "2025-07-01T00:00",
            "2025-07-01T01:00",
            "2025-07-01T02:00",
            "2025-07-01T03:00",
            "2025-07-01T04:00",
            "2025-07-01T05:00",
            "2025-07-01T06:00",
            "2025-07-01T07:00",
            "2025-07-01T08:00",
            "2025-07-01T09:00",
            "2025-07-01T10:00",
            "2025-07-01T11:00",
            "2025-07-01T12:00",
            "2025-07-01T13:00",
            "2025-07-01T14:00",
            "2025-07-01T15:00",
            "2025-07-01T16:00",
            "2025-07-01T17:00",
            "2025-07-01T18:00",
            "2025-07-01T19:00",
            "2025-07-01T20:00",
            "2025-07-01T21:00",
            "2025-07-01T22:00",
            "2025-07-01T23:00",
            "2025-07-02T00:00",
            "2025-07-02T01:00",
            "2025-07-02T02:00",
            "2025-07-02T03:00",
            "2025-07-02T04:00",
            "2025-07-02T05:00",
            "2025-07-02T06:00",
            "2025-07-02T07:00",
            "2025-07-02T08:00",
            "2025-07-02T09:00",
            "2025-07-02T10:00",
            "2025-07-02T11:00",
            "2025-07-02T12:00",
            "2025-07-02T13:00",
            "2025-07-02T14:00",
            "2025-07-02T15:00",
            "2025-07-02T16:00",
            "2025-07-02T17:00",
            "2025-07-02T18:00",
            "2025-07-02T19:00",
            "2025-07-02T20:00",
            "2025-07-02T21:00",
            "2025-07-02T22:00",
            "2025-07-02T23:00",
            "2025-07-03T00:00",
            "2025-07-03T01:00",
            "2025-07-03T02:00",
            "2025-07-03T03:00",
            "2025-07-03T04:00",
            "2025-07-03T05:00",
            "2025-07-03T06:00",
            "2025-07-03T07:00",
            "2025-07-03T08:00",
            "2025-07-03T09:00",
            "2025-07-03T10:00",
            "2025-07-03T11:00",
            "2025-07-03T12:00",
            "2025-07-03T13:00",
            "2025-07-03T14:00",
            "2025-07-03T15:00",
            "2025-07-03T16:00",
            "2025-07-03T17:00",
            "2025-07-03T18:00",
            "2025-07-03T19:00",
            "2025-07-03T20:00",
            "2025-07-03T21:00",
            "2025-07-03T22:00",
            "2025-07-03T23:00",
            "2025-07-04T00:00",
            "2025-07-04T01:00",
            "2025-07-04T02:00",
            "2025-07-04T03:00",
            "2025-07-04T04:00",
            "2025-07-04T05:00",
            "2025-07-04T06:00",
            "2025-07-04T07:00",
            "2025-07-04T08:00",
            "2025-07-04T09:00",
            "2025-07-04T10:00",
            "2025-07-04T11:00",
            "2025-07-04T12:00",
            "2025-07-04T13:00",
            "2025-07-04T14:00",
            "2025-07-04T15:00",
            "2025-07-04T16:00",
            "2025-07-04T17:00",
            "2025-07-04T18:00",
            "2025-07-04T19:00",
            "2025-07-04T20:00",
            "2025-07-04T21:00",
            "2025-07-04T22:00",
            "2025-07-04T23:00",
            "2025-07-05T00:00",
            "2025-07-05T01:00",
            "2025-07-05T02:00",
            "2025-07-05T03:00",
            "2025-07-05T04:00",
            "2025-07-05T05:00",
            "2025-07-05T06:00",
            "2025-07-05T07:00",
            "2025-07-05T08:00",
            "2025-07-05T09:00",
            "2025-07-05T10:00",
            "2025-07-05T11:00",
            "2025-07-05T12:00",
            "2025-07-05T13:00",
            "2025-07-05T14:00",
            "2025-07-05T15:00",
            "2025-07-05T16:00",
            "2025-07-05T17:00",
            "2025-07-05T18:00",
            "2025-07-05T19:00",
            "2025-07-05T20:00",
            "2025-07-05T21:00",
            "2025-07-05T22:00",
            "2025-07-05T23:00",
            "2025-07-06T00:00",
            "2025-07-06T01:00",
            "2025-07-06T02:00",
            "2025-07-06T03:00",
            "2025-07-06T04:00",
            "2025-07-06T05:00",
            "2025-07-06T06:00",
            "2025-07-06T07:00",
            "2025-07-06T08:00",
            "2025-07-06T09:00",
            "2025-07-06T10:00",
            "2025-07-06T11:00",
            "2025-07-06T12:00",
            "2025-07-06T13:00",
            "2025-07-06T14:00",
            "2025-07-06T15:00",
            "2025-07-06T16:00",
            "2025-07-06T17:00",
            "2025-07-06T18:00",
            "2025-07-06T19:00",
            "2025-07-06T20:00",
            "2025-07-06T21:00",
            "2025-07-06T22:00",
            "2025-07-06T23:00",
            "2025-07-07T00:00",
            "2025-07-07T01:00",
            "2025-07-07T02:00",
            "2025-07-07T03:00",
            "2025-07-07T04:00",
            "2025-07-07T05:00",
            "2025-07-07T06:00",
            "2025-07-07T07:00",
            "2025-07-07T08:00",
            "2025-07-07T09:00",
            "2025-07-07T10:00",
            "2025-07-07T11:00",
            "2025-07-07T12:00",
            "2025-07-07T13:00",
            "2025-07-07T14:00",
            "2025-07-07T15:00",
            "2025-07-07T16:00",
            "2025-07-07T17:00",
            "2025-07-07T18:00",
            "2025-07-07T19:00",
            "2025-07-07T20:00",
            "2025-07-07T21:00",
            "2025-07-07T22:00",
            "2025-07-07T23:00",
            "2025-07-08T00:00",
            "2025-07-08T01:00",
            "2025-07-08T02:00",
            "2025-07-08T03:00",
            "2025-07-08T04:00",
            "2025-07-08T05:00",
            "2025-07-08T06:00",
            "2025-07-08T07:00",
            "2025-07-08T08:00",
            "2025-07-08T09:00",
            "2025-07-08T10:00",
            "2025-07-08T11:00",
            "2025-07-08T12:00",
            "2025-07-08T13:00",
            "2025-07-08T14:00",
            "2025-07-08T15:00",
            "2025-07-08T16:00",
            "2025-07-08T17:00",
            "2025-07-08T18:00",
            "2025-07-08T19:00",
            "2025-07-08T20:00",
            "2025-07-08T21:00",
            "2025-07-08T22:00",
            "2025-07-08T23:00"
            ],
            "temperature_2m": [
            16,
            15,
            14.5,
            14.4,
            14.3,
            14.2,
            14.1,
            14.5,
            15.5,
            16.5,
            17,
            18.1,
            19.7,
            22.4,
            23.2,
            23.7,
            24.6,
            24.9,
            25.2,
            23.7,
            22.1,
            21.4,
            19.9,
            19.3,
            19,
            18.8,
            18.8,
            18.2,
            17.7,
            17.2,
            16.9,
            17.2,
            17.9,
            18.8,
            19.9,
            21,
            22.4,
            23.5,
            24.7,
            25.3,
            25.9,
            26.8,
            26.9,
            26.5,
            25.8,
            24.9,
            23.4,
            22,
            21,
            21.1,
            20.4,
            19.7,
            19.2,
            18.3,
            18.1,
            17.9,
            18.8,
            20.4,
            19.9,
            21.5,
            22.6,
            21.6,
            23.4,
            23.5,
            23.7,
            23.3,
            22.5,
            22.9,
            21.4,
            19.7,
            19.1,
            18.3,
            17.7,
            16.5,
            16,
            15.3,
            13.7,
            14,
            14.5,
            15,
            16,
            17.8,
            19.6,
            21.2,
            22.1,
            23.5,
            25.1,
            26.2,
            26.1,
            25.6,
            24.4,
            24.2,
            23.4,
            22,
            20.7,
            19.7,
            18.9,
            18.9,
            18.8,
            18.9,
            18.8,
            18.8,
            19.1,
            19.6,
            20.6,
            22.1,
            21.8,
            23,
            24.3,
            25,
            27.1,
            28.3,
            28.9,
            28.7,
            28.3,
            27.9,
            26.8,
            25.3,
            24,
            23.5,
            22.2,
            21.5,
            20.3,
            19.4,
            18.7,
            18.2,
            18.2,
            18.4,
            19.6,
            20.6,
            21.7,
            23.1,
            24.3,
            25.5,
            26.3,
            27.1,
            28.5,
            28.8,
            28.7,
            28.9,
            27.9,
            25.4,
            24.2,
            23.3,
            22.4,
            21,
            20.3,
            19.8,
            19.2,
            19,
            18.6,
            19,
            20.1,
            21.6,
            23.9,
            25.6,
            27.2,
            29.3,
            30.4,
            30.9,
            31.3,
            31.6,
            31.2,
            30.7,
            29.9,
            28.8,
            27.6,
            26.6,
            25.9,
            25.2,
            24.8,
            24.2,
            23.6,
            23.5,
            23.3,
            23.4,
            24.5,
            25.7,
            27.3,
            28.7,
            29.7,
            31,
            31.9,
            32.1,
            32.7,
            31.7,
            31.5,
            31.5,
            30.8,
            29.6,
            27,
            25.1,
            23.7,
            21.9,
            20.9,
            19.9,
            18.9,
            18.4,
            18.3,
            18.3,
            19,
            19.2,
            19,
            18.7,
            18.5,
            18.8,
            19,
            18.3,
            18.2,
            19.2,
            20.6,
            21.4,
            22.1,
            20.9,
            19.6,
            18.4,
            17.3,
            16.3,
            15.5,
            14.8,
            14.3,
            13.9,
            13.8,
            14.2,
            15.3,
            16.7,
            18.2,
            19.7,
            21.1,
            22.1,
            23,
            23.4,
            23.9,
            23.8,
            23.5,
            23.3,
            22.8,
            21.9,
            20.5,
            19.7,
            18.9,
            17.9,
            16.8,
            15.9,
            15.1,
            14.4,
            14.2,
            15.5,
            17.3,
            19.4,
            21.4,
            23.1,
            24.2,
            25.1,
            25.7,
            25.9,
            25.9,
            25.7,
            25.2,
            24.5,
            23.4,
            22,
            20.7,
            19.6,
            18.6,
            17.7,
            17,
            16.3,
            15.9,
            15.7,
            15.7,
            16,
            16.7,
            17.6,
            18.3,
            18.6,
            18.8,
            18.7,
            18.4,
            18,
            17.6,
            17.5,
            17.4,
            17.2,
            16.8,
            16.3,
            15.9,
            15.5,
            15.3,
            15.2,
            15.4,
            15.8,
            16.1,
            16.2,
            16.2,
            16.2,
            15.9,
            17.2,
            18.3,
            19,
            19.5,
            19.9,
            20.1,
            20.1,
            19.9,
            19.4,
            18.7,
            18,
            17.4,
            17,
            16.5,
            16.1,
            15.6,
            15.3,
            15,
            14.7,
            14.5,
            14.5,
            14.5,
            14.6,
            14.7,
            14.9,
            15.3,
            16.1,
            17.2,
            18.2,
            19.1,
            19.9,
            20.4,
            20.6,
            20.5,
            20.1,
            19.3,
            18.2,
            17.1,
            16.1,
            15.1,
            14.1,
            13.3,
            12.5,
            12,
            11.7,
            11.7,
            12.1,
            13.3,
            15,
            16.5,
            17.7,
            18.7,
            19.4,
            17.2,
            18.2,
            18.8,
            18.7,
            18.1,
            17.5,
            17.1,
            16.7,
            16.1,
            15.2
            ],
            "weather_code": [
            1,
            1,
            1,
            2,
            2,
            3,
            95,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            2,
            2,
            3,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            1,
            2,
            2,
            2,
            2,
            2,
            3,
            2,
            3,
            3,
            3,
            3,
            3,
            2,
            2,
            3,
            2,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            2,
            2,
            2,
            3,
            3,
            2,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            61,
            61,
            61,
            3,
            3,
            2,
            2,
            2,
            3,
            3,
            3,
            2,
            3,
            3,
            2,
            1,
            1,
            2,
            3,
            3,
            1,
            1,
            1,
            2,
            3,
            2,
            2,
            2,
            3,
            2,
            2,
            3,
            3,
            3,
            3,
            3,
            2,
            3,
            2,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            3,
            2,
            3,
            3,
            3,
            2,
            1,
            1,
            1,
            1,
            1,
            3,
            2,
            1,
            1,
            1,
            2,
            0,
            0,
            2,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2,
            2,
            2,
            3,
            2,
            2,
            3,
            2,
            3,
            2,
            2,
            3,
            2,
            3,
            3,
            3,
            1,
            0,
            0,
            1,
            1,
            1,
            3,
            2,
            2,
            3,
            3,
            3,
            53,
            3,
            61,
            61,
            61,
            61,
            61,
            61,
            61,
            61,
            3,
            2,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            2,
            3,
            2,
            2,
            2,
            2,
            2,
            1,
            0,
            3,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            80,
            80,
            80,
            61,
            61,
            61,
            61,
            61,
            61,
            61,
            61,
            61,
            61,
            61,
            61,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            80,
            80,
            80,
            80,
            80,
            80,
            3,
            3,
            3,
            2,
            2,
            2,
            80,
            80,
            80,
            3,
            3,
            3,
            80,
            80,
            80,
            3,
            3,
            3,
            2,
            2,
            2,
            2,
            2,
            2,
            1,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            1,
            2,
            2,
            2,
            1,
            1,
            1,
            3,
            3,
            3,
            51,
            51,
            51,
            2,
            2,
            2,
            2,
            2,
            2,
            1
            ],
            "uv_index": [
            0,
            0,
            0,
            0,
            0,
            0,
            0.2,
            0.85,
            0.5,
            0.45,
            0.7,
            1.75,
            2.55,
            2.6,
            4.8,
            3.3,
            2.15,
            2.6,
            3.2,
            1.95,
            0.95,
            0.25,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.2,
            0.8,
            1.2,
            1.45,
            1.95,
            4.05,
            6.4,
            6.85,
            6.55,
            4.4,
            5.5,
            4.4,
            3.2,
            2,
            0.85,
            0.25,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.15,
            0.6,
            1.75,
            2.65,
            3.7,
            2.2,
            1.75,
            4.75,
            4.1,
            6.5,
            5.4,
            4.3,
            3,
            2,
            0.95,
            0.25,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.05,
            0.8,
            1.8,
            3.05,
            4.35,
            5.25,
            6.15,
            6.4,
            7,
            6.05,
            5.6,
            4.6,
            3.3,
            2,
            0.95,
            0.25,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.15,
            0.75,
            1.45,
            2.85,
            3,
            5.25,
            4.9,
            6.5,
            6.25,
            6.4,
            5.75,
            4.55,
            3.25,
            1.95,
            0.95,
            0.25,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.2,
            0.8,
            1.5,
            2.55,
            4,
            5.55,
            6.5,
            7,
            7.05,
            6.6,
            5.75,
            4.3,
            3,
            1.8,
            0.9,
            0.25,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.2,
            0.85,
            1.8,
            3.1,
            4.4,
            5.65,
            6.6,
            7.1,
            7.15,
            6.7,
            5.85,
            4.65,
            3.3,
            2,
            0.95,
            0.25,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.2,
            0.85,
            1.75,
            2.8,
            3.85,
            4.85,
            6.15,
            6.7,
            6.55,
            6.3,
            4.9,
            4.4,
            3.25,
            2,
            0.95,
            0.25,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.2,
            0.45,
            1.6,
            1.9,
            0.85,
            0.95,
            1.8,
            0.7,
            2.05,
            1.85,
            1.3,
            1.45,
            2.95,
            1.8,
            0.95,
            0.25,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.2,
            0.8,
            1.75,
            2.95,
            4.3,
            5.5,
            6.4,
            6.9,
            6.95,
            6.5,
            5.65,
            4.15,
            1.4,
            0.7,
            0.4,
            0.15,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.15,
            0.8,
            1.7,
            2.8,
            3.75,
            4.75,
            5.45,
            6.1,
            5.85,
            4.7,
            3.9,
            2.95,
            1.95,
            1.4,
            0.75,
            0.25,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.15,
            0.3,
            1,
            0.85,
            3.55,
            3.15,
            5.4,
            4.35,
            5.6,
            3.7,
            0.55,
            0.45,
            0.15,
            0.15,
            0.1,
            0.05,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.15,
            0.75,
            1.1,
            1.45,
            1.95,
            2.75,
            3.65,
            4.2,
            4.2,
            3.9,
            3.5,
            3,
            2.35,
            1.75,
            1.2,
            0.75,
            0.35,
            0.15,
            0.05,
            0,
            0,
            0,
            0,
            0,
            0.05,
            0.3,
            0.95,
            1.85,
            2.8,
            3.9,
            5.1,
            5.95,
            6.35,
            6.35,
            5.9,
            4.65,
            2.95,
            1.55,
            0.8,
            0.4,
            0.1,
            0,
            0,
            0,
            0,
            0,
            0,
            0.05,
            0.1,
            0.3,
            0.6,
            1.05,
            1.55,
            2.2,
            3,
            3.6,
            4.05,
            4.4,
            4.4,
            3.95,
            3.2,
            2.4,
            1.6,
            0.75,
            0.15,
            0
            ]
            },
            "daily_units": {
            "time": "iso8601",
            "weather_code": "wmo code",
            "temperature_2m_max": "째C",
            "temperature_2m_min": "째C",
            "precipitation_probability_max": "%",
            "precipitation_sum": "mm"
            },
            "daily": {
            "time": [
            "2025-06-24",
            "2025-06-25",
            "2025-06-26",
            "2025-06-27",
            "2025-06-28",
            "2025-06-29",
            "2025-06-30",
            "2025-07-01",
            "2025-07-02",
            "2025-07-03",
            "2025-07-04",
            "2025-07-05",
            "2025-07-06",
            "2025-07-07",
            "2025-07-08"
            ],
            "weather_code": [
            95,
            3,
            3,
            61,
            3,
            3,
            2,
            3,
            61,
            3,
            3,
            80,
            80,
            80,
            51
            ],
            "temperature_2m_max": [
            25.2,
            26.9,
            23.7,
            26.2,
            28.9,
            28.9,
            31.6,
            32.7,
            23.7,
            23.9,
            25.9,
            18.8,
            20.1,
            20.6,
            19.4
            ],
            "temperature_2m_min": [
            14.1,
            16.9,
            17.9,
            13.7,
            18.8,
            18.2,
            18.6,
            23.3,
            18.2,
            13.8,
            14.2,
            15.5,
            15.2,
            14.5,
            11.7
            ],
            "precipitation_probability_max": [
            50,
            5,
            55,
            90,
            0,
            0,
            0,
            0,
            88,
            3,
            3,
            42,
            45,
            53,
            55
            ],
            "precipitation_sum": [
            1,
            0,
            0,
            1.5,
            0,
            0,
            0,
            0,
            7,
            0,
            0,
            8.7,
            6.9,
            3.9,
            0.3
            ]
            }
        };
        
    api.get = jest.fn().mockResolvedValue({ data: mockResponse });

        const params = {
        latitude: 51.5,
        longitude: -0.12,
        daily: "sunrise,sunset,uv_index_max,temperature_2m_max,temperature_2m_min,precipitation_probability_max,precipitation_sum",
        hourly: "temperature_2m,weather_code,uv_index",
        models: "best_match",
        current: "temperature_2m,relative_humidity_2m,precipitation,weather_code,wind_speed_10m,wind_direction_10m,wind_gusts_10m,apparent_temperature",
        timezone: "auto",
        start_date: currentDate,
        end_date: nextDate
        };

        const fixedParams = {
        daily: "sunrise,sunset,uv_index_max,temperature_2m_max,temperature_2m_min,precipitation_probability_max,precipitation_sum",
        hourly: "temperature_2m,weather_code,uv_index",
        models: "best_match",
        current: "temperature_2m,relative_humidity_2m,precipitation,weather_code,wind_speed_10m,wind_direction_10m,wind_gusts_10m,apparent_temperature"
        };

        Object.entries(fixedParams).forEach(([key, value]) => {
            expect(params).toHaveProperty(key);
            expect(params[key]).toBe(value);
        });

        const stringKeys = ["timezone", "start_date", "end_date"];
        const numberKeys = ["latitude", "longitude"];
        stringKeys.forEach(key => {
            expect(params).toHaveProperty(key);
            expect(typeof params[key]).toBe("string");
            });
        numberKeys.forEach(key => {
            expect(params).toHaveProperty(key);
            expect(typeof params[key]).toBe("number");
        });

        return fetchCurrentWeather(params)
            .then((response) => {
            expect(api.get).toHaveBeenCalledWith("/v1/forecast", { params });
            expect(response).toEqual(mockResponse);
        });
    });
    test("400: Bad Request when given invalid parameters", () => {
        const errorMsg = {
            response: { status: 400 },
            message: "400: Bad Request"
        };

        api.get = jest.fn().mockRejectedValue(errorMsg);
        const invalidParams = {
            latitude: 'test',
            longitude: 'test',
            daily: 123,
            hourly: false,
            models: false,
            current: {},
            timezone: [],
            start_date: [],
            end_date: 123
        };

        const stringKeys = ["daily", "hourly", "models", "current", "timezone", "start_date", "end_date"];
        const numberKeys = ["latitude", "longitude"];
        numberKeys.forEach(key => {
            expect(invalidParams).toHaveProperty(key);
            expect(typeof invalidParams[key]).not.toBe("number");
        });
        
        stringKeys.forEach(key => {
            expect(invalidParams).toHaveProperty(key);
            expect(typeof invalidParams[key]).not.toBe("string");
        });

        return fetchCurrentWeather(invalidParams)
        .catch(error => {
            expect(error).toBeInstanceOf(Object);
            expect(error.message).toEqual("400: Bad Request");
        })
    });
    test("400: Bad Request when there are missing parameters", () => {
        const errorMsg = {
            response: { status: 400 },
            message: "400: Bad Request"
        };

        const params = { latitude: 51.5 };

        api.get = jest.fn().mockRejectedValue(errorMsg);

        return fetchCurrentWeather(params)
        .catch((error) => {
            expect(error.message).toBe("400: Bad Request");
        });
    });
    test("Displays \"Failed to fetch weather data\" for other generic errors(no response from server, 404, .etc)", () => {
        const errorMsg = {
            response: undefined,
            message: "Failed to fetch weather data"
        };

        const parisParams = {
            latitude: 48.85,
            longitude: 2.35,
            daily: "sunrise,sunset,uv_index_max,temperature_2m_max,temperature_2m_min,precipitation_probability_max,precipitation_sum",
            hourly: "temperature_2m,weather_code,uv_index",
            models: "best_match",
            current: "temperature_2m,relative_humidity_2m,precipitation,weather_code,wind_speed_10m,wind_direction_10m,wind_gusts_10m,apparent_temperature",
            timezone: "auto",
            start_date: currentDate,
            end_date: nextDate
        };

        api.get = jest.fn().mockRejectedValue(errorMsg);

        return fetchCurrentWeather(parisParams)
        .catch(error => {
            expect(error).toBeInstanceOf(Object);
            expect(error.message).toBe("Failed to fetch weather data");
        });
    });
});

describe("fetchWeeklyWeather", () => {
    test('Returns the correct weather information for a seven day forecast', () => {
    const mockResponse = {
            "latitude": 51.5,
            "longitude": -0.120000124,
            "generationtime_ms": 0.2549886703491211,
            "utc_offset_seconds": 3600,
            "timezone": "Europe/London",
            "timezone_abbreviation": "GMT+1",
            "elevation": 23,
            "current_units": {
            "time": "iso8601",
            "interval": "seconds",
            "temperature_2m": "째C",
            "relative_humidity_2m": "%",
            "precipitation": "mm",
            "weather_code": "wmo code",
            "wind_speed_10m": "km/h",
            "wind_direction_10m": "째",
            "wind_gusts_10m": "km/h",
            "apparent_temperature": "째C"
            },
            "current": {
            "time": "2025-07-01T16:00",
            "interval": 900,
            "temperature_2m": 32.7,
            "relative_humidity_2m": 37,
            "precipitation": 0,
            "weather_code": 3,
            "wind_speed_10m": 11.6,
            "wind_direction_10m": 263,
            "wind_gusts_10m": 26.6,
            "apparent_temperature": 33.1
            },
            "hourly_units": {
            "time": "iso8601",
            "temperature_2m": "째C",
            "weather_code": "wmo code",
            "uv_index": ""
            },
            "hourly": {
            "time": [
            "2025-07-01T00:00",
            "2025-07-01T01:00",
            "2025-07-01T02:00",
            "2025-07-01T03:00",
            "2025-07-01T04:00",
            "2025-07-01T05:00",
            "2025-07-01T06:00",
            "2025-07-01T07:00",
            "2025-07-01T08:00",
            "2025-07-01T09:00",
            "2025-07-01T10:00",
            "2025-07-01T11:00",
            "2025-07-01T12:00",
            "2025-07-01T13:00",
            "2025-07-01T14:00",
            "2025-07-01T15:00",
            "2025-07-01T16:00",
            "2025-07-01T17:00",
            "2025-07-01T18:00",
            "2025-07-01T19:00",
            "2025-07-01T20:00",
            "2025-07-01T21:00",
            "2025-07-01T22:00",
            "2025-07-01T23:00",
            "2025-07-02T00:00",
            "2025-07-02T01:00",
            "2025-07-02T02:00",
            "2025-07-02T03:00",
            "2025-07-02T04:00",
            "2025-07-02T05:00",
            "2025-07-02T06:00",
            "2025-07-02T07:00",
            "2025-07-02T08:00",
            "2025-07-02T09:00",
            "2025-07-02T10:00",
            "2025-07-02T11:00",
            "2025-07-02T12:00",
            "2025-07-02T13:00",
            "2025-07-02T14:00",
            "2025-07-02T15:00",
            "2025-07-02T16:00",
            "2025-07-02T17:00",
            "2025-07-02T18:00",
            "2025-07-02T19:00",
            "2025-07-02T20:00",
            "2025-07-02T21:00",
            "2025-07-02T22:00",
            "2025-07-02T23:00",
            "2025-07-03T00:00",
            "2025-07-03T01:00",
            "2025-07-03T02:00",
            "2025-07-03T03:00",
            "2025-07-03T04:00",
            "2025-07-03T05:00",
            "2025-07-03T06:00",
            "2025-07-03T07:00",
            "2025-07-03T08:00",
            "2025-07-03T09:00",
            "2025-07-03T10:00",
            "2025-07-03T11:00",
            "2025-07-03T12:00",
            "2025-07-03T13:00",
            "2025-07-03T14:00",
            "2025-07-03T15:00",
            "2025-07-03T16:00",
            "2025-07-03T17:00",
            "2025-07-03T18:00",
            "2025-07-03T19:00",
            "2025-07-03T20:00",
            "2025-07-03T21:00",
            "2025-07-03T22:00",
            "2025-07-03T23:00",
            "2025-07-04T00:00",
            "2025-07-04T01:00",
            "2025-07-04T02:00",
            "2025-07-04T03:00",
            "2025-07-04T04:00",
            "2025-07-04T05:00",
            "2025-07-04T06:00",
            "2025-07-04T07:00",
            "2025-07-04T08:00",
            "2025-07-04T09:00",
            "2025-07-04T10:00",
            "2025-07-04T11:00",
            "2025-07-04T12:00",
            "2025-07-04T13:00",
            "2025-07-04T14:00",
            "2025-07-04T15:00",
            "2025-07-04T16:00",
            "2025-07-04T17:00",
            "2025-07-04T18:00",
            "2025-07-04T19:00",
            "2025-07-04T20:00",
            "2025-07-04T21:00",
            "2025-07-04T22:00",
            "2025-07-04T23:00",
            "2025-07-05T00:00",
            "2025-07-05T01:00",
            "2025-07-05T02:00",
            "2025-07-05T03:00",
            "2025-07-05T04:00",
            "2025-07-05T05:00",
            "2025-07-05T06:00",
            "2025-07-05T07:00",
            "2025-07-05T08:00",
            "2025-07-05T09:00",
            "2025-07-05T10:00",
            "2025-07-05T11:00",
            "2025-07-05T12:00",
            "2025-07-05T13:00",
            "2025-07-05T14:00",
            "2025-07-05T15:00",
            "2025-07-05T16:00",
            "2025-07-05T17:00",
            "2025-07-05T18:00",
            "2025-07-05T19:00",
            "2025-07-05T20:00",
            "2025-07-05T21:00",
            "2025-07-05T22:00",
            "2025-07-05T23:00",
            "2025-07-06T00:00",
            "2025-07-06T01:00",
            "2025-07-06T02:00",
            "2025-07-06T03:00",
            "2025-07-06T04:00",
            "2025-07-06T05:00",
            "2025-07-06T06:00",
            "2025-07-06T07:00",
            "2025-07-06T08:00",
            "2025-07-06T09:00",
            "2025-07-06T10:00",
            "2025-07-06T11:00",
            "2025-07-06T12:00",
            "2025-07-06T13:00",
            "2025-07-06T14:00",
            "2025-07-06T15:00",
            "2025-07-06T16:00",
            "2025-07-06T17:00",
            "2025-07-06T18:00",
            "2025-07-06T19:00",
            "2025-07-06T20:00",
            "2025-07-06T21:00",
            "2025-07-06T22:00",
            "2025-07-06T23:00",
            "2025-07-07T00:00",
            "2025-07-07T01:00",
            "2025-07-07T02:00",
            "2025-07-07T03:00",
            "2025-07-07T04:00",
            "2025-07-07T05:00",
            "2025-07-07T06:00",
            "2025-07-07T07:00",
            "2025-07-07T08:00",
            "2025-07-07T09:00",
            "2025-07-07T10:00",
            "2025-07-07T11:00",
            "2025-07-07T12:00",
            "2025-07-07T13:00",
            "2025-07-07T14:00",
            "2025-07-07T15:00",
            "2025-07-07T16:00",
            "2025-07-07T17:00",
            "2025-07-07T18:00",
            "2025-07-07T19:00",
            "2025-07-07T20:00",
            "2025-07-07T21:00",
            "2025-07-07T22:00",
            "2025-07-07T23:00"
            ],
            "temperature_2m": [
            25.9,
            25.2,
            24.8,
            24.2,
            23.6,
            23.5,
            23.3,
            23.4,
            24.5,
            25.7,
            27.3,
            28.7,
            29.7,
            31,
            31.9,
            32.1,
            32.7,
            31.7,
            31.5,
            31.5,
            30.8,
            29.6,
            27,
            25.1,
            23.7,
            21.9,
            20.9,
            19.9,
            18.9,
            18.4,
            18.3,
            18.3,
            19,
            19.2,
            19,
            18.7,
            18.5,
            18.8,
            19,
            18.3,
            18.2,
            19.2,
            20.6,
            21.4,
            22.1,
            20.9,
            19.6,
            18.4,
            17.3,
            16.3,
            15.5,
            14.8,
            14.3,
            13.9,
            13.8,
            14.2,
            15.3,
            16.7,
            18.2,
            19.7,
            21.1,
            22.1,
            23,
            23.4,
            23.9,
            23.8,
            23.5,
            23.3,
            22.8,
            21.9,
            20.5,
            19.7,
            18.9,
            17.9,
            16.8,
            15.9,
            15.1,
            14.4,
            14.2,
            15.5,
            17.3,
            19.4,
            21.4,
            23.1,
            24.2,
            25.1,
            25.7,
            25.9,
            25.9,
            25.7,
            25.2,
            24.5,
            23.4,
            22,
            20.7,
            19.6,
            18.6,
            17.7,
            17,
            16.3,
            15.9,
            15.7,
            15.7,
            16,
            16.7,
            17.6,
            18.3,
            18.6,
            18.8,
            18.7,
            18.4,
            18,
            17.6,
            17.5,
            17.4,
            17.2,
            16.8,
            16.3,
            15.9,
            15.5,
            15.3,
            15.2,
            15.4,
            15.8,
            16.1,
            16.2,
            16.2,
            16.2,
            15.9,
            17.2,
            18.3,
            19,
            19.5,
            19.9,
            20.1,
            20.1,
            19.9,
            19.4,
            18.7,
            18,
            17.4,
            17,
            16.5,
            16.1,
            15.6,
            15.3,
            15,
            14.7,
            14.5,
            14.5,
            14.5,
            14.6,
            14.7,
            14.9,
            15.3,
            16.1,
            17.2,
            18.2,
            19.1,
            19.9,
            20.4,
            20.6,
            20.5,
            20.1,
            19.3,
            18.2,
            17.1,
            16.1
            ],
            "weather_code": [
            0,
            0,
            2,
            2,
            2,
            3,
            2,
            2,
            3,
            2,
            3,
            2,
            2,
            3,
            2,
            3,
            3,
            3,
            1,
            0,
            0,
            1,
            1,
            1,
            3,
            2,
            2,
            3,
            3,
            3,
            53,
            3,
            61,
            61,
            61,
            61,
            61,
            61,
            61,
            61,
            3,
            2,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            2,
            3,
            2,
            2,
            2,
            2,
            2,
            1,
            0,
            3,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            80,
            80,
            80,
            61,
            61,
            61,
            61,
            61,
            61,
            61,
            61,
            61,
            61,
            61,
            61,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            80,
            80,
            80,
            80,
            80,
            80,
            3,
            3,
            3,
            2,
            2,
            2,
            80,
            80,
            80,
            3,
            3,
            3,
            80,
            80,
            80,
            3,
            3,
            3,
            2,
            2,
            2,
            2,
            2,
            2,
            1,
            1,
            1,
            0
            ],
            "uv_index": [
            0,
            0,
            0,
            0,
            0,
            0,
            0.2,
            0.85,
            1.75,
            2.8,
            3.85,
            4.85,
            6.15,
            6.7,
            6.55,
            6.3,
            4.9,
            4.4,
            3.25,
            2,
            0.95,
            0.25,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.2,
            0.45,
            1.6,
            1.9,
            0.85,
            0.95,
            1.8,
            0.7,
            2.05,
            1.85,
            1.3,
            1.45,
            2.95,
            1.8,
            0.95,
            0.25,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.2,
            0.8,
            1.75,
            2.95,
            4.3,
            5.5,
            6.4,
            6.9,
            6.95,
            6.5,
            5.65,
            4.15,
            1.4,
            0.7,
            0.4,
            0.15,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.15,
            0.8,
            1.7,
            2.8,
            3.75,
            4.75,
            5.45,
            6.1,
            5.85,
            4.7,
            3.9,
            2.95,
            1.95,
            1.4,
            0.75,
            0.25,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.15,
            0.3,
            1,
            0.85,
            3.55,
            3.15,
            5.4,
            4.35,
            5.6,
            3.7,
            0.55,
            0.45,
            0.15,
            0.15,
            0.1,
            0.05,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.15,
            0.75,
            1.1,
            1.45,
            1.95,
            2.75,
            3.65,
            4.2,
            4.2,
            3.9,
            3.5,
            3,
            2.35,
            1.75,
            1.2,
            0.75,
            0.35,
            0.15,
            0.05,
            0,
            0,
            0,
            0,
            0,
            0.05,
            0.3,
            0.95,
            1.85,
            2.8,
            3.9,
            5.1,
            5.95,
            6.35,
            6.35,
            5.9,
            4.65,
            2.95,
            1.55,
            0.8,
            0.4,
            0.1,
            0
            ]
            },
            "daily_units": {
            "time": "iso8601",
            "weather_code": "wmo code",
            "temperature_2m_max": "째C",
            "temperature_2m_min": "째C",
            "precipitation_probability_max": "%",
            "precipitation_sum": "mm"
            },
            "daily": {
            "time": [
            "2025-07-01",
            "2025-07-02",
            "2025-07-03",
            "2025-07-04",
            "2025-07-05",
            "2025-07-06",
            "2025-07-07"
            ],
            "weather_code": [
            3,
            61,
            3,
            3,
            80,
            80,
            80
            ],
            "temperature_2m_max": [
            32.7,
            23.7,
            23.9,
            25.9,
            18.8,
            20.1,
            20.6
            ],
            "temperature_2m_min": [
            23.3,
            18.2,
            13.8,
            14.2,
            15.5,
            15.2,
            14.5
            ],
            "precipitation_probability_max": [
            0,
            88,
            3,
            3,
            42,
            45,
            53
            ],
            "precipitation_sum": [
            0,
            7,
            0,
            0,
            8.7,
            6.9,
            3.9
            ]
            }
    };

    api.get = jest.fn().mockResolvedValue({ data: mockResponse });

        const params = {
        latitude: 51.5,
        longitude: -0.12,
        daily: "weather_code,temperature_2m_max,temperature_2m_min,precipitation_probability_max,precipitation_sum",
        hourly: "temperature_2m,weather_code,uv_index",
        models: "best_match",
        current: "temperature_2m,relative_humidity_2m,precipitation,weather_code,wind_speed_10m,wind_direction_10m,wind_gusts_10m,apparent_temperature",
        timezone: "auto",
        };

        const fixedParams = {
        daily: "weather_code,temperature_2m_max,temperature_2m_min,precipitation_probability_max,precipitation_sum",
        hourly: "temperature_2m,weather_code,uv_index",
        models: "best_match",
        current: "temperature_2m,relative_humidity_2m,precipitation,weather_code,wind_speed_10m,wind_direction_10m,wind_gusts_10m,apparent_temperature"
        };

        Object.entries(fixedParams).forEach(([key, value]) => {
            expect(params).toHaveProperty(key);
            expect(params[key]).toBe(value);
        });

        const stringKeys = ["timezone"];
        const numberKeys = ["latitude", "longitude"];
        stringKeys.forEach(key => {
            expect(params).toHaveProperty(key);
            expect(typeof params[key]).toBe("string");
            });
        numberKeys.forEach(key => {
            expect(params).toHaveProperty(key);
            expect(typeof params[key]).toBe("number");
        });

        return fetchWeeklyWeather(params)
            .then((response) => {
            expect(api.get).toHaveBeenCalledWith("/v1/forecast", { params });
            expect(response).toEqual(mockResponse);
        });
    });
    test("400: Bad Request when given invalid parameters", () => {
        const errorMsg = {
            response: { status: 400 },
            message: "400: Bad Request"
        };

        api.get = jest.fn().mockRejectedValue(errorMsg);
        const invalidParams = {
            latitude: 'test',
            longitude: 'test',
            daily: 123,
            hourly: false,
            models: false,
            current: {},
            timezone: [],
        };

        const stringKeys = ["daily", "hourly", "models", "current", "timezone"];
        const numberKeys = ["latitude", "longitude"];
        numberKeys.forEach(key => {
            expect(invalidParams).toHaveProperty(key);
            expect(typeof invalidParams[key]).not.toBe("number");
        });
        
        stringKeys.forEach(key => {
            expect(invalidParams).toHaveProperty(key);
            expect(typeof invalidParams[key]).not.toBe("string");
        });

        return fetchWeeklyWeather(invalidParams)
        .catch(error => {
            expect(error).toBeInstanceOf(Object);
            expect(error.message).toEqual("400: Bad Request");
        })
    });
    test("400: Bad Request when there are missing parameters", () => {
        const errorMsg = {
            response: { status: 400 },
            message: "400: Bad Request"
        };

        const params = { latitude: 51.5 };

        api.get = jest.fn().mockRejectedValue(errorMsg);

        return fetchWeeklyWeather(params)
        .catch((error) => {
            expect(error.message).toBe("400: Bad Request");
        });
    });
    test("Displays \"Failed to fetch weather data\" for other generic errors(no response from server, 404, .etc)", () => {
        const errorMsg = {
            response: undefined,
            message: "Failed to fetch weather data"
        };

        const parisParams = {
            latitude: 48.85,
            longitude: 2.35,
            daily: "weather_code,temperature_2m_max,temperature_2m_min,precipitation_probability_max,precipitation_sum",
            hourly: "temperature_2m,weather_code,uv_index",
            models: "best_match",
            current: "temperature_2m,relative_humidity_2m,precipitation,weather_code,wind_speed_10m,wind_direction_10m,wind_gusts_10m,apparent_temperature",
            timezone: "auto",
        };

        api.get = jest.fn().mockRejectedValue(errorMsg);

        return fetchWeeklyWeather(parisParams)
        .catch(error => {
            expect(error).toBeInstanceOf(Object);
            expect(error.message).toBe("Failed to fetch weather data");
        });
    });
});

describe("fetchLocation", () => {
  test("Returns a list of locations that matches the input", () => {
    const mockResponse = [{
        "id": 2643743,
        "name": "London",
        "latitude": 51.50853,
        "longitude": -0.12574,
        "elevation": 25,
        "feature_code": "PPLC",
        "country_code": "GB",
        "admin1_id": 6269131,
        "admin2_id": 2648110,
        "timezone": "Europe/London",
        "population": 8961989,
        "country_id": 2635167,
        "country": "United Kingdom",
        "admin1": "England",
        "admin2": "Greater London"
        },
        {
        "id": 6058560,
        "name": "London",
        "latitude": 42.98339,
        "longitude": -81.23304,
        "elevation": 252,
        "feature_code": "PPL",
        "country_code": "CA",
        "admin1_id": 6093943,
        "admin2_id": 6073256,
        "timezone": "America/Toronto",
        "population": 346765,
        "country_id": 6251999,
        "country": "Canada",
        "admin1": "Ontario",
        "admin2": "Middlesex County"
        },
        {
        "id": 4517009,
        "name": "London",
        "latitude": 39.88645,
        "longitude": -83.44825,
        "elevation": 321,
        "feature_code": "PPLA2",
        "country_code": "US",
        "admin1_id": 5165418,
        "admin2_id": 4517365,
        "admin3_id": 4517024,
        "timezone": "America/New_York",
        "population": 10060,
        "postcodes": [
        "43140"
        ],
        "country_id": 6252001,
        "country": "United States",
        "admin1": "Ohio",
        "admin2": "Madison",
        "admin3": "City of London"
        },
        {
        "id": 4298960,
        "name": "London",
        "latitude": 37.12898,
        "longitude": -84.08326,
        "elevation": 378,
        "feature_code": "PPLA2",
        "country_code": "US",
        "admin1_id": 6254925,
        "admin2_id": 4297480,
        "timezone": "America/New_York",
        "population": 8126,
        "postcodes": [
        "40741",
        "40742",
        "40743",
        "40744",
        "40745"
        ],
        "country_id": 6252001,
        "country": "United States",
        "admin1": "Kentucky",
        "admin2": "Laurel"
        },
        {
        "id": 4119617,
        "name": "London",
        "latitude": 35.32897,
        "longitude": -93.25296,
        "elevation": 116,
        "feature_code": "PPL",
        "country_code": "US",
        "admin1_id": 4099753,
        "admin2_id": 4127100,
        "admin3_id": 4105863,
        "timezone": "America/Chicago",
        "population": 1046,
        "postcodes": [
        "72847"
        ],
        "country_id": 6252001,
        "country": "United States",
        "admin1": "Arkansas",
        "admin2": "Pope",
        "admin3": "Clark Township"
        }];

    const location = "London";

    expect(typeof location).toBe("string");

    axios.get = jest.fn().mockResolvedValue({
        data: {
            results: mockResponse
        }
    });
    return fetchLocation(location)
        .then((response) => {
        expect(axios.get).toHaveBeenCalledWith("https://geocoding-api.open-meteo.com/v1/search", {params: { name: location, count: 5 }});
        expect(response.results.forEach(element => {
            expect(element).toHaveProperty("name", "London");
            expect(element).toHaveProperty("latitude");
            expect(element).toHaveProperty("longitude");
        }));
        expect(response.results.length).toBe(5);
    });
  });
  test("Returns the correct current weather info for the chosen location", () => {
    const mockLocationResponse = [{
        "id": 2643743,
        "name": "London",
        "latitude": 51.50853,
        "longitude": -0.12574,
        "elevation": 25,
        "feature_code": "PPLC",
        "country_code": "GB",
        "admin1_id": 6269131,
        "admin2_id": 2648110,
        "timezone": "Europe/London",
        "population": 8961989,
        "country_id": 2635167,
        "country": "United Kingdom",
        "admin1": "England",
        "admin2": "Greater London"
        },
        {
        "id": 6058560,
        "name": "London",
        "latitude": 42.98339,
        "longitude": -81.23304,
        "elevation": 252,
        "feature_code": "PPL",
        "country_code": "CA",
        "admin1_id": 6093943,
        "admin2_id": 6073256,
        "timezone": "America/Toronto",
        "population": 346765,
        "country_id": 6251999,
        "country": "Canada",
        "admin1": "Ontario",
        "admin2": "Middlesex County"
        },
        {
        "id": 4517009,
        "name": "London",
        "latitude": 39.88645,
        "longitude": -83.44825,
        "elevation": 321,
        "feature_code": "PPLA2",
        "country_code": "US",
        "admin1_id": 5165418,
        "admin2_id": 4517365,
        "admin3_id": 4517024,
        "timezone": "America/New_York",
        "population": 10060,
        "postcodes": [
        "43140"
        ],
        "country_id": 6252001,
        "country": "United States",
        "admin1": "Ohio",
        "admin2": "Madison",
        "admin3": "City of London"
        },
        {
        "id": 4298960,
        "name": "London",
        "latitude": 37.12898,
        "longitude": -84.08326,
        "elevation": 378,
        "feature_code": "PPLA2",
        "country_code": "US",
        "admin1_id": 6254925,
        "admin2_id": 4297480,
        "timezone": "America/New_York",
        "population": 8126,
        "postcodes": [
        "40741",
        "40742",
        "40743",
        "40744",
        "40745"
        ],
        "country_id": 6252001,
        "country": "United States",
        "admin1": "Kentucky",
        "admin2": "Laurel"
        },
        {
        "id": 4119617,
        "name": "London",
        "latitude": 35.32897,
        "longitude": -93.25296,
        "elevation": 116,
        "feature_code": "PPL",
        "country_code": "US",
        "admin1_id": 4099753,
        "admin2_id": 4127100,
        "admin3_id": 4105863,
        "timezone": "America/Chicago",
        "population": 1046,
        "postcodes": [
        "72847"
        ],
        "country_id": 6252001,
        "country": "United States",
        "admin1": "Arkansas",
        "admin2": "Pope",
        "admin3": "Clark Township"
        }];

    const location = "London";
    axios.get = jest.fn().mockResolvedValue({
            data: {
                results: mockLocationResponse
            }
        });
    return fetchLocation(location)
    .then((response) => {
        expect(axios.get).toHaveBeenCalledWith("https://geocoding-api.open-meteo.com/v1/search", {params: { name: location, count: 5 }});

        const chosenLocation = response.results[0];
        const params = {
            latitude: chosenLocation.latitude,
            longitude: chosenLocation.longitude,
            daily: "sunrise,sunset,uv_index_max,temperature_2m_max,temperature_2m_min,precipitation_probability_max,precipitation_sum",
            hourly: "temperature_2m,weather_code,uv_index",
            models: "best_match",
            current: "temperature_2m,relative_humidity_2m,precipitation,weather_code,wind_speed_10m,wind_direction_10m,wind_gusts_10m,apparent_temperature",
            timezone: "auto",
            start_date: currentDate,
            end_date: nextDate
        }
        return params;
    })
    .then((params) => {
    const weatherMockResponse = {
        "latitude": 51.5,
        "longitude": -0.120000124,
        "generationtime_ms": 0.5693435668945312,
        "utc_offset_seconds": 3600,
        "timezone": "Europe/London",
        "timezone_abbreviation": "GMT+1",
        "elevation": 23,
        "current_units": {
        "time": "iso8601",
        "interval": "seconds",
        "temperature_2m": "째C",
        "relative_humidity_2m": "%",
        "precipitation": "mm",
        "weather_code": "wmo code",
        "wind_speed_10m": "km/h",
        "wind_direction_10m": "째",
        "wind_gusts_10m": "km/h",
        "apparent_temperature": "째C"
        },
        "current": {
        "time": "2025-07-01T16:00",
        "interval": 900,
        "temperature_2m": 32.7,
        "relative_humidity_2m": 37,
        "precipitation": 0,
        "weather_code": 3,
        "wind_speed_10m": 11.6,
        "wind_direction_10m": 263,
        "wind_gusts_10m": 26.6,
        "apparent_temperature": 33.1
        },
        "hourly_units": {
        "time": "iso8601",
        "temperature_2m": "째C",
        "weather_code": "wmo code",
        "uv_index": ""
        },
        "hourly": {
        "time": [
        "2025-06-24T00:00",
        "2025-06-24T01:00",
        "2025-06-24T02:00",
        "2025-06-24T03:00",
        "2025-06-24T04:00",
        "2025-06-24T05:00",
        "2025-06-24T06:00",
        "2025-06-24T07:00",
        "2025-06-24T08:00",
        "2025-06-24T09:00",
        "2025-06-24T10:00",
        "2025-06-24T11:00",
        "2025-06-24T12:00",
        "2025-06-24T13:00",
        "2025-06-24T14:00",
        "2025-06-24T15:00",
        "2025-06-24T16:00",
        "2025-06-24T17:00",
        "2025-06-24T18:00",
        "2025-06-24T19:00",
        "2025-06-24T20:00",
        "2025-06-24T21:00",
        "2025-06-24T22:00",
        "2025-06-24T23:00",
        "2025-06-25T00:00",
        "2025-06-25T01:00",
        "2025-06-25T02:00",
        "2025-06-25T03:00",
        "2025-06-25T04:00",
        "2025-06-25T05:00",
        "2025-06-25T06:00",
        "2025-06-25T07:00",
        "2025-06-25T08:00",
        "2025-06-25T09:00",
        "2025-06-25T10:00",
        "2025-06-25T11:00",
        "2025-06-25T12:00",
        "2025-06-25T13:00",
        "2025-06-25T14:00",
        "2025-06-25T15:00",
        "2025-06-25T16:00",
        "2025-06-25T17:00",
        "2025-06-25T18:00",
        "2025-06-25T19:00",
        "2025-06-25T20:00",
        "2025-06-25T21:00",
        "2025-06-25T22:00",
        "2025-06-25T23:00"
        ],
        "temperature_2m": [
        16,
        15,
        14.5,
        14.4,
        14.3,
        14.2,
        14.1,
        14.5,
        15.5,
        16.5,
        17,
        18.1,
        19.7,
        22.4,
        23.2,
        23.7,
        24.6,
        24.9,
        25.2,
        23.7,
        22.1,
        21.4,
        19.9,
        19.3,
        19,
        18.8,
        18.8,
        18.2,
        17.7,
        17.2,
        16.9,
        17.2,
        17.9,
        18.8,
        19.9,
        21,
        22.4,
        23.5,
        24.7,
        25.3,
        25.9,
        26.8,
        26.9,
        26.5,
        25.8,
        24.9,
        23.4,
        22
        ],
        "weather_code": [
        1,
        1,
        1,
        2,
        2,
        3,
        95,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        2,
        3,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        2,
        2,
        2,
        2,
        2,
        3,
        2,
        3,
        3,
        3,
        3,
        3,
        2,
        2,
        3,
        2,
        3,
        3,
        3
        ],
        "uv_index": [
        0,
        0,
        0,
        0,
        0,
        0,
        0.2,
        0.85,
        0.5,
        0.45,
        0.7,
        1.75,
        2.55,
        2.6,
        4.8,
        3.3,
        2.15,
        2.6,
        3.2,
        1.95,
        0.95,
        0.25,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0.2,
        0.8,
        1.2,
        1.45,
        1.95,
        4.05,
        6.4,
        6.85,
        6.55,
        4.4,
        5.5,
        4.4,
        3.2,
        2,
        0.85,
        0.25,
        0,
        0
        ]
        },
        "daily_units": {
        "time": "iso8601",
        "weather_code": "wmo code",
        "temperature_2m_max": "째C",
        "temperature_2m_min": "째C",
        "precipitation_probability_max": "%",
        "precipitation_sum": "mm"
        },
        "daily": {
        "time": [
        "2025-06-24",
        "2025-06-25"
        ],
        "weather_code": [
        95,
        3
        ],
        "temperature_2m_max": [
        25.2,
        26.9
        ],
        "temperature_2m_min": [
        14.1,
        16.9
        ],
        "precipitation_probability_max": [
        50,
        5
        ],
        "precipitation_sum": [
        1,
        0
        ]
        }
    };

        api.get = jest.fn().mockResolvedValue({ data: weatherMockResponse });
        return fetchCurrentWeather(params)
        .then((response) => {
            expect(api.get).toHaveBeenCalledWith("/v1/forecast", { params });

            expect(response).toEqual(weatherMockResponse);
        })
    });
  });
  test("Returns the correct weekly weather info for the chosen location", () => {
    const mockLocationResponse = [{
        "id": 2643743,
        "name": "London",
        "latitude": 51.50853,
        "longitude": -0.12574,
        "elevation": 25,
        "feature_code": "PPLC",
        "country_code": "GB",
        "admin1_id": 6269131,
        "admin2_id": 2648110,
        "timezone": "Europe/London",
        "population": 8961989,
        "country_id": 2635167,
        "country": "United Kingdom",
        "admin1": "England",
        "admin2": "Greater London"
        },
        {
        "id": 6058560,
        "name": "London",
        "latitude": 42.98339,
        "longitude": -81.23304,
        "elevation": 252,
        "feature_code": "PPL",
        "country_code": "CA",
        "admin1_id": 6093943,
        "admin2_id": 6073256,
        "timezone": "America/Toronto",
        "population": 346765,
        "country_id": 6251999,
        "country": "Canada",
        "admin1": "Ontario",
        "admin2": "Middlesex County"
        },
        {
        "id": 4517009,
        "name": "London",
        "latitude": 39.88645,
        "longitude": -83.44825,
        "elevation": 321,
        "feature_code": "PPLA2",
        "country_code": "US",
        "admin1_id": 5165418,
        "admin2_id": 4517365,
        "admin3_id": 4517024,
        "timezone": "America/New_York",
        "population": 10060,
        "postcodes": [
        "43140"
        ],
        "country_id": 6252001,
        "country": "United States",
        "admin1": "Ohio",
        "admin2": "Madison",
        "admin3": "City of London"
        },
        {
        "id": 4298960,
        "name": "London",
        "latitude": 37.12898,
        "longitude": -84.08326,
        "elevation": 378,
        "feature_code": "PPLA2",
        "country_code": "US",
        "admin1_id": 6254925,
        "admin2_id": 4297480,
        "timezone": "America/New_York",
        "population": 8126,
        "postcodes": [
        "40741",
        "40742",
        "40743",
        "40744",
        "40745"
        ],
        "country_id": 6252001,
        "country": "United States",
        "admin1": "Kentucky",
        "admin2": "Laurel"
        },
        {
        "id": 4119617,
        "name": "London",
        "latitude": 35.32897,
        "longitude": -93.25296,
        "elevation": 116,
        "feature_code": "PPL",
        "country_code": "US",
        "admin1_id": 4099753,
        "admin2_id": 4127100,
        "admin3_id": 4105863,
        "timezone": "America/Chicago",
        "population": 1046,
        "postcodes": [
        "72847"
        ],
        "country_id": 6252001,
        "country": "United States",
        "admin1": "Arkansas",
        "admin2": "Pope",
        "admin3": "Clark Township"
        }];

    const location = "London";
    axios.get = jest.fn().mockResolvedValue({
            data: {
                results: mockLocationResponse
            }
        });
    return fetchLocation(location)
    .then((response) => {
        expect(axios.get).toHaveBeenCalledWith("https://geocoding-api.open-meteo.com/v1/search", {params: { name: location, count: 5 }});
        
        const chosenLocation = response.results[0];
        const params = {
            latitude: chosenLocation.latitude,
            longitude: chosenLocation.longitude,
            daily: "weather_code,temperature_2m_max,temperature_2m_min,precipitation_probability_max,precipitation_sum",
            hourly: "temperature_2m,weather_code,uv_index",
            models: "best_match",
            current: "temperature_2m,relative_humidity_2m,precipitation,weather_code,wind_speed_10m,wind_direction_10m,wind_gusts_10m,apparent_temperature",
            timezone: "auto"
        }
        return params;
    })
    .then((params) => {
        const weatherMockResponse = {
            "latitude": 51.5,
            "longitude": -0.120000124,
            "generationtime_ms": 0.16689300537109375,
            "utc_offset_seconds": 0,
            "timezone": "GMT",
            "timezone_abbreviation": "GMT",
            "elevation": 23,
            "current_units": {
            "time": "iso8601",
            "interval": "seconds",
            "temperature_2m": "째C",
            "relative_humidity_2m": "%",
            "precipitation": "mm",
            "weather_code": "wmo code",
            "wind_speed_10m": "km/h",
            "wind_direction_10m": "째",
            "wind_gusts_10m": "km/h",
            "apparent_temperature": "째C"
            },
            "current": {
            "time": "2025-06-30T19:00",
            "interval": 900,
            "temperature_2m": 29.6,
            "relative_humidity_2m": 40,
            "precipitation": 0,
            "weather_code": 0,
            "wind_speed_10m": 11.3,
            "wind_direction_10m": 197,
            "wind_gusts_10m": 28.4,
            "apparent_temperature": 29.5
            },
            "hourly_units": {
            "time": "iso8601",
            "temperature_2m": "째C",
            "weather_code": "wmo code",
            "uv_index": ""
            },
            "hourly": {
            "time": [],
            "temperature_2m": [],
            "weather_code": [],
            "uv_index": []
            },
            "daily_units": {
            "time": "iso8601",
            "weather_code": "wmo code",
            "temperature_2m_max": "째C",
            "temperature_2m_min": "째C"
            },
            "daily": {
            "time": [
            "2025-06-30",
            "2025-07-01",
            "2025-07-02",
            "2025-07-03",
            "2025-07-04",
            "2025-07-05",
            "2025-07-06"
            ],
            "weather_code": [
            2,
            3,
            80,
            3,
            3,
            80,
            80
            ],
            "temperature_2m_max": [
            31.6,
            32.2,
            24,
            24.7,
            25.8,
            20.5,
            19
            ],
            "temperature_2m_min": [
            18.6,
            23.6,
            17.8,
            14.8,
            14.9,
            15.5,
            15.4
            ]
            } 
        };

        api.get = jest.fn().mockResolvedValue({ data: weatherMockResponse });
        return fetchWeeklyWeather(params)
        .then((response) => {
            expect(api.get).toHaveBeenCalledWith("/v1/forecast", { params });

            expect(response).toEqual(weatherMockResponse);
        })
    });
  });
});

